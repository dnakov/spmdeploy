// Generated by CoffeeScript 1.8.0
var Promise, SFLogin, basedir, color, crypto, error, fs, iprompt, jsforce, keytar, nopt, path, q;

jsforce = require("jsforce");

Promise = require("jsforce/lib/promise");

q = require("q");

fs = require("graceful-fs");

iprompt = require("inquirer").prompt;

path = require("path");

try {
  keytar = require("keytar");
} catch (_error) {
  error = _error;
}

nopt = require("nopt");

crypto = require("crypto");

color = require("cli-color");

basedir = process.cwd();

SFLogin = (function() {
  SFLogin.prototype.knownOpts = {
    username: String,
    password: String,
    "api-version": String,
    "login-url": String
  };

  SFLogin.prototype.shortHands = {};

  SFLogin.prototype.passFile = path.resolve(process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE, "spm.json");

  SFLogin.prototype.prompt = function(questions) {
    var d;
    d = q.defer();
    iprompt(questions, function(answers) {
      return d.resolve(answers);
    });
    return d.promise;
  };

  function SFLogin() {
    this.readFile = q.denodeify(fs.readFile);
    this.writeFile = q.denodeify(fs.writeFile);
  }

  SFLogin.prototype.initLogin = function(cb) {
    var questions;
    questions = [
      {
        name: "username",
        message: "SF Username: "
      }, {
        name: "password",
        message: "SF Password: ",
        type: 'password'
      }, {
        name: "apiVersion",
        message: "API Version: ",
        "default": "30.0"
      }, {
        name: "loginUrl",
        type: "list",
        choices: [
          {
            name: "Developer/Production",
            value: "https://login.salesforce.com"
          }, {
            name: "Sandbox",
            value: "https://test.salesforce.com"
          }
        ],
        message: "Org Type",
        "default": {
          name: "Developer/Production",
          value: "https://login.salesforce.com"
        }
      }
    ];
    return iprompt(questions, (function(_this) {
      return function(params) {
        var cipher, encrypted, isdone;
        _this.params = params;
        isdone = {};
        cipher = crypto.createCipher('aes256', 'NJzdDqqiDUWsQFwLGoRiTHUPcXVWirjUYTgUTsL7BtMZ3jvgDB');
        encrypted = cipher.update(_this.params.password, 'utf8', 'hex') + cipher.final('hex');
        return fs.readFile(_this.passFile, "utf8", function(er, data) {
          var hash, lst;
          lst = data != null ? JSON.parse(data) : {
            sfdc: {}
          };
          hash = _this.params.loginUrl + '$' + _this.params.username;
          if ((keytar != null ? keytar.getPassword('SPM-SFDC: ' + _this.params.loginUrl, _this.params.username) : void 0) === null) {
            if (keytar != null) {
              keytar.addPassword('SPM-SFDC: ' + _this.params.loginUrl, _this.params.username, _this.params.password);
            }
          } else {
            if (keytar != null) {
              keytar.replacePassword('SPM-SFDC: ' + _this.params.loginUrl, _this.params.username, _this.params.password);
            }
          }
          lst.sfdc[hash] = {
            lastMod: new Date(),
            username: _this.params.username,
            loginUrl: _this.params.loginUrl,
            apiVersion: _this.params.apiVersion,
            password: encrypted
          };
          _this.activeLogin = {
            lastMod: new Date(),
            username: _this.params.username,
            loginUrl: _this.params.loginUrl,
            apiVersion: _this.params.apiVersion,
            password: _this.params.password
          };
          _this.writeFile(_this.passFile, JSON.stringify(lst), "utf8", function(er, success) {});
          return typeof cb === "function" ? cb() : void 0;
        });
      };
    })(this));
  };

  SFLogin.prototype.chooseLogin = function(cb) {
    if (process.argv.indexOf('-m') !== -1) {
      this.manualLogin();
      return typeof cb === "function" ? cb() : void 0;
    } else {
      return fs.readFile(this.passFile, 'utf-8', (function(_this) {
        return function(er, data) {
          var choices, key, lst, questions, value, _ref;
          lst = JSON.parse(data);
          choices = [];
          _ref = lst.sfdc;
          for (key in _ref) {
            value = _ref[key];
            choices.push({
              value: value,
              name: value.username + ' | ' + color.blue(value.loginUrl),
              dt: value
            });
          }
          choices.sort(function(a, b) {
            var date1, date2;
            date1 = new Date(a.lastMod);
            date2 = new Date(b.lastMod);
            if (date1 > date2) {
              return -1;
            }
            if (date1 < date2) {
              return 1;
            }
            return 0;
          });
          questions = {
            name: 'login',
            type: 'list',
            choices: choices,
            message: 'Select Login: '
          };
          return iprompt(questions, function(answer) {
            var decipher, pass;
            if (keytar != null) {
              pass = keytar != null ? keytar.getPassword('SPM-SFDC: ' + answer.login.loginUrl, answer.login.username) : void 0;
            } else {
              decipher = crypto.createDecipher('aes256', 'NJzdDqqiDUWsQFwLGoRiTHUPcXVWirjUYTgUTsL7BtMZ3jvgDB');
              pass = decipher.update(answer.login.password, 'hex', 'utf8') + decipher.final('utf8');
            }
            _this.activeLogin = {
              loginUrl: answer.login.loginUrl,
              username: answer.login.username,
              apiVersion: answer.login.apiVersion,
              password: pass
            };
            return typeof cb === "function" ? cb() : void 0;
          });
        };
      })(this));
    }
  };

  SFLogin.prototype.manualLogin = function() {
    var args;
    args = nopt(this.knownOpts, this.shortHands);
    return this.activeLogin = {
      username: args.username,
      password: args.password,
      loginUrl: args['login-url'],
      apiVersion: args['api-version']
    };
  };

  SFLogin.prototype.login = function(reinit, cb) {
    if (process.argv.indexOf('-m') !== -1) {
      this.manualLogin();
    }
    if (reinit !== true || (this.activeLogin != null)) {
      return this._login((function(_this) {
        return function(er, data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        };
      })(this));
    } else {
      return this.initLogin((function(_this) {
        return function(data) {
          return _this._login(function(er, data) {
            if (er != null) {
              if (typeof cb === "function") {
                cb(er);
              }
            }
            return typeof cb === "function" ? cb(null, data) : void 0;
          });
        };
      })(this));
    }
  };

  SFLogin.prototype._login = function(cb) {
    var conn;
    if (!this.activeLogin.loginUrl) {
      throw "Missing loginUrl";
    }
    if (!this.activeLogin.username) {
      throw "Missing username";
    }
    if (!this.activeLogin.password) {
      throw "Missing password";
    }
    if (!this.activeLogin.apiVersion) {
      throw "Missing apiVersion";
    }
    conn = new jsforce.Connection({
      loginUrl: this.activeLogin.loginUrl,
      version: this.activeLogin.apiVersion
    });
    return conn.login(this.activeLogin.username, this.activeLogin.password, function(er, conn2) {
      if (er != null) {
        return typeof cb === "function" ? cb(er) : void 0;
      }
      return typeof cb === "function" ? cb(null, conn) : void 0;
    });
  };

  return SFLogin;

})();

module.exports = new SFLogin;
