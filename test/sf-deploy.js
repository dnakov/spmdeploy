// Generated by CoffeeScript 1.8.0
var assert, jsforce, sfdeploy;

sfdeploy = require("../index");

jsforce = require("jsforce");

assert = require("assert");

describe("Deploy", function() {
  this.timeout(160000);
  describe('#readMetadata()', function() {
    this.timeout(140000);
    return it('should connect to sf and filter to classes/test3.cls only', function(done) {
      var conn;
      conn = new jsforce.Connection({
        loginUrl: 'https://login.salesforce.com',
        version: '31.0'
      });
      return conn.login('daniel@3demo.com', 'dgdfee12345', (function(_this) {
        return function(er, data) {
          var deploy;
          deploy = new sfdeploy(__dirname, ['test3'], conn, '31.0');
          return deploy.getMetadata(function(er, data) {
            return deploy.createFileList(function(er, files) {
              console.log(files);
              assert.equal(Object.keys(files).length, 1);
              assert.equal(true, Object.keys(files)[0].indexOf('test3') !== -1);
              return done();
            });
          });
        };
      })(this));
    });
  });
  describe('#readFiles()', function() {
    return it('should find test3 file but not test4', (function(_this) {
      return function(done) {
        var deploy;
        deploy = new sfdeploy(__dirname, ['test3']);
        return deploy.createFileList(function(er, files) {
          console.log(files);
          assert.equal(Object.keys(files).length, 1);
          assert.equal(true, Object.keys(files)[0].indexOf('test3') !== -1);
          return done();
        });
      };
    })(this));
  });
  return describe('#deploy()', function() {
    return it('should deploy some junk', function(done) {
      var conn;
      conn = new jsforce.Connection({
        loginUrl: 'https://login.salesforce.com',
        version: '31.0'
      });
      return conn.login('daniel@3demo.com', 'dgdfee12345', (function(_this) {
        return function(er, data) {
          var deploy;
          deploy = new sfdeploy(__dirname, [], conn, '31.0');
          return deploy.deploy([], function(er, data) {
            return done();
          });
        };
      })(this));
    });
  });
});
