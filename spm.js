// Generated by CoffeeScript 1.8.0
var Promise, SPMDeploy, color, force, fs, log, path, print, progress, prompt, sflogin,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

process.title = "spm";

progress = require("progress");

print = require("node-print");

Promise = require("jsforce/lib/promise");

sflogin = require("./sflogin");

force = require("./sfdeploy");

fs = require("fs-extended");

path = require("path");

prompt = require("inquirer").prompt;

log = require('better-log');

color = require('chalk');

SPMDeploy = (function() {
  SPMDeploy.prototype.bar = null;

  SPMDeploy.prototype.basedir = process.cwd();

  function SPMDeploy() {
    this.deploymentProgress = __bind(this.deploymentProgress, this);
    this.createProgressBar = __bind(this.createProgressBar, this);
    this.commands = {
      "chooselogin": function() {
        return sflogin.chooseLogin(function(er, data) {
          if (er != null) {
            log(er);
          } else {
            log("Login Success");
          }
          return errorHandler();
        });
      },
      "sflogin": function(options, cb) {
        return sflogin.login(options, true, function(er, conn) {
          if (er != null) {
            log(er);
          } else {
            log("Login Success");
          }
          return cb(er, conn);
        });
      },
      "deploy": (function(_this) {
        return function(options, callback) {
          return _this.deploy(options, function(er, result) {
            var filename, item, res, _i, _len, _ref, _ref1, _ref2;
            if ((result.details.componentSuccesses != null) && (result.details.componentFailures != null)) {
              res = Array.prototype.concat(result.details.componentSuccesses, result.details.componentFailures);
            } else if (result.details.componentFailures != null) {
              res = result.details.componentFailures;
            } else {
              res = result.details.componentSuccesses;
            }
            for (_i = 0, _len = res.length; _i < _len; _i++) {
              item = res[_i];
              delete item.createdDate;
              item.fileName = item.fileName.replace('unpackaged/', '');
              delete item.text;
            }
            print.pt(res);
            if (options.fullLog) {
              console.log(JSON.stringify(result));
            }
            if (options.jUnit != null) {
              filename = options.jUnit;
            }
            if (options.clover != null) {
              filename = options.clover;
            }
            if (result.success === false) {
              if (((_ref = result.details) != null ? (_ref1 = _ref.runTestResult) != null ? _ref1.codeCoverageWarnings : void 0 : void 0) != null) {
                errorHandler(JSON.stringify((_ref2 = result.details) != null ? _ref2.runTestResult.codeCoverageWarnings : void 0));
              }
              log('Deployment Failed');
            } else {
              log('Deployment Succeeded');
            }
            return callback(er, result);
          });
        };
      })(this)
    };
  }

  SPMDeploy.prototype.deploy = function(options, cb) {
    var doDeploy;
    doDeploy = (function(_this) {
      return function(options, conn, cb) {
        var deploy, dirs;
        dirs = [];
        deploy = new force(_this.basedir, [options.filter], conn, options);
        return deploy.getMetadata(function(er, data) {
          return deploy.createFileList(function(er, files) {
            var choices, file, i, questions;
            questions = [];
            choices = [];
            if (options.manual) {
              for (file in files) {
                if (file.indexOf('-meta.xml') === -1) {
                  choices.push({
                    name: file,
                    value: file
                  });
                }
              }
              deploy.deployCheckCB = _this.deploymentProgress;
              _this.createProgressBar(choices.length);
              return deploy.deploy(null, function(er, result) {
                return typeof cb === "function" ? cb(null, result) : void 0;
              });
            } else {
              i = 0;
              for (file in files) {
                if (file.indexOf('-meta.xml') === -1) {
                  choices.push({
                    name: file,
                    value: file,
                    type: "checkbox",
                    checked: true
                  });
                }
              }
              for (file in files) {
                if (file.indexOf('-meta.xml') !== -1) {
                  if (files[file.replace('-meta.xml', '')] == null) {
                    choices.push({
                      name: file,
                      value: file,
                      type: "checkbox",
                      checked: true
                    });
                  }
                }
              }
              questions.push({
                name: "metadata",
                type: "checkbox",
                choices: choices,
                message: "Select Files"
              });
              return prompt(questions, function(result) {
                deploy.deployCheckCB = _this.deploymentProgress;
                _this.createProgressBar(result.metadata.length);
                return deploy.deploy(result.metadata, function(er, result) {
                  return typeof cb === "function" ? cb(null, result) : void 0;
                });
              });
            }
          });
        });
      };
    })(this);
    if (options.manual) {
      return sflogin.manualLogin(options, (function(_this) {
        return function(er, conn) {
          return doDeploy(options, conn, cb);
        };
      })(this));
    } else {
      return sflogin.chooseLogin(options, (function(_this) {
        return function(er, login) {
          return sflogin.login(null, function(er, conn) {
            return doDeploy(options, conn, cb);
          });
        };
      })(this));
    }
  };

  SPMDeploy.prototype.createProgressBar = function(total) {
    return this.bar = new progress(':elapsed s [:curr/:stotal] [:bar] :percent [ ERRORS: :errors ] [ ETA: :eta s ]', {
      complete: '=',
      incomplete: ' ',
      width: 20,
      total: total
    });
  };

  SPMDeploy.prototype.deploymentProgress = function(er, result) {
    var ratio, tokens;
    this.bar.total = result.numberComponentsTotal > 0 ? result.numberComponentsTotal : this.bar.total;
    tokens = {
      stotal: this.bar.total,
      errors: result.numberComponentErrors,
      curr: parseInt(result.numberComponentsDeployed) + parseInt(result.numberComponentErrors)
    };
    ratio = tokens.curr / this.bar.total;
    if (this.bar.curr / this.bar.total !== 1) {
      return this.bar.update(ratio, tokens);
    }
  };

  return SPMDeploy;

})();

module.exports = SPMDeploy;
