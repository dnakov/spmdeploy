// Generated by CoffeeScript 1.8.0
var JSZip, SFDeploy, async, fs, path, sflogin, xmldom,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require("fs-extended");

async = require("async");

JSZip = require("jszip");

xmldom = require("xmldom");

sflogin = require("./sflogin");

path = require("path");

SFDeploy = (function() {
  SFDeploy.prototype.rootPath = null;

  SFDeploy.prototype.currentDeployStatus = {};

  SFDeploy.prototype.deployCheckCB = function() {};

  SFDeploy.prototype.conn = null;

  SFDeploy.prototype.apiVersion = '31.0';

  SFDeploy.prototype.metadata = {
    metadataObjects: []
  };

  SFDeploy.prototype.filterBy = [];

  SFDeploy.prototype.files = {};

  SFDeploy.prototype.dirs = [];

  SFDeploy.prototype.deployOptions = {
    rollbackOnError: false,
    runAllTests: false
  };

  function SFDeploy(rootPath, filterBy, conn, apiVersion) {
    this.pathFilter = __bind(this.pathFilter, this);
    this.rootPath = rootPath;
    this.conn = conn;
    this.apiVersion = apiVersion;
    this.filterBy = filterBy;
    this.files = {};
    this.dirs = [];
  }

  SFDeploy.prototype.getMetadata = function(cb) {
    if (this.conn == null) {
      return typeof cb === "function" ? cb() : void 0;
    }
    return this.conn.metadata.describe(this.apiVersion).then((function(_this) {
      return function(meta) {
        _this.metadata = meta;
        _this.getMetaDirs();
        return typeof cb === "function" ? cb(null, meta) : void 0;
      };
    })(this), function(err) {
      return typeof cb === "function" ? cb(err) : void 0;
    });
  };

  SFDeploy.prototype.getMetaDirs = function() {
    var dir, _i, _len, _ref, _results;
    this.dirs = [];
    _ref = this.metadata.metadataObjects;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dir = _ref[_i];
      _results.push(this.dirs.push(dir.directoryName));
    }
    return _results;
  };

  SFDeploy.prototype.pathFilter = function(itemPath) {
    var i, item, match, re, _ref;
    match = itemPath.match(/src\/(.*?)\//);
    if (((match != null) && match.length > 1) && (this.dirs.length === 0 || (_ref = match[1], __indexOf.call(this.dirs, _ref) >= 0))) {
      if (!(this.filterBy.length > 0)) {
        return true;
      }
      i = 0;
      while (i < this.filterBy.length) {
        item = this.filterBy[i];
        re = new RegExp(item);
        if (re.test(itemPath)) {
          return true;
        }
        i++;
      }
    }
    return false;
  };

  SFDeploy.prototype.createFileList = function(cb) {
    var areadFile;
    this.files = {};
    areadFile = (function(_this) {
      return function(item, cb) {
        return fs.readFile(path.join(_this.rootPath, item), {
          flag: "r"
        }, function(er, results) {
          return cb(er, results);
        });
      };
    })(this);
    return fs.listFiles(path.resolve(this.rootPath), {
      filter: this.pathFilter,
      recursive: 1
    }, (function(_this) {
      return function(err, files) {
        return async.map(files, areadFile, function(er, results) {
          var data, i, _i, _len;
          for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {
            data = results[i];
            _this.files[files[i]] = data;
          }
          return typeof cb === "function" ? cb(null, _this.files) : void 0;
        });
      };
    })(this));
  };

  SFDeploy.prototype.checkStatus = function(id, cb) {
    return this.conn.metadata.checkDeployStatus(id, true, (function(_this) {
      return function(er, fullResult) {
        if (fullResult.done) {
          if (typeof _this.deployCheckCB === "function") {
            _this.deployCheckCB(fullResult);
          }
          return typeof cb === "function" ? cb(fullResult) : void 0;
        } else {
          _this.checkStatus(id, cb);
          return typeof _this.deployCheckCB === "function" ? _this.deployCheckCB(fullResult) : void 0;
        }
      };
    })(this));
  };

  SFDeploy.prototype.deploy = function(filterBy, cb) {
    this.filterBy = filterBy || this.filterBy || [];
    return this.getMetadata((function(_this) {
      return function(er, data) {
        return _this.createFileList(function(er, files) {
          return _this._deploy(files, cb);
        });
      };
    })(this));
  };

  SFDeploy.prototype.deployFileList = function(filterBy, cb) {
    this.filterBy = filterBy || [];
    return this.createFileList((function(_this) {
      return function(er, files) {
        return _this._deploy(files, cb);
      };
    })(this));
  };

  SFDeploy.prototype._deploy = function(files, cb) {
    var E, T, data, doc, fileName, fullName, metadataObjectsByDir, p, typeDirName, xml, z, zip, zipFileName, _ref;
    this.files = files || this.files;
    E = function(name, children) {
      var e, i;
      e = doc.createElement(name);
      i = 0;
      while (i < children.length) {
        e.appendChild(children[i]);
        i++;
      }
      return e;
    };
    T = function(name, text) {
      var e;
      e = doc.createElement(name);
      e.textContent = text;
      return e;
    };
    metadataObjectsByDir = {};
    this.metadata.metadataObjects.forEach(function(metadataObject) {
      return metadataObjectsByDir[metadataObject.directoryName] = metadataObject;
    });
    zip = new JSZip();
    doc = xmldom.DOMImplementation.prototype.createDocument("http://soap.sforce.com/2006/04/metadata", "Package");
    doc.documentElement.setAttribute("xmlns", "http://soap.sforce.com/2006/04/metadata");
    _ref = this.files;
    for (fileName in _ref) {
      console.log(fileName)
      data = _ref[fileName];
      if (!(fileName.indexOf("-meta.xml") === -1)) {
        continue;
      }
      zipFileName = path.join("unpackaged", path.basename(path.resolve(fileName, "../")), path.basename(fileName));
      zip.file(zipFileName, data);
      if (this.files[fileName + "-meta.xml"] != null) {
        zip.file(zipFileName + "-meta.xml", this.files[fileName + "-meta.xml"]);
      }
      fullName = path.basename(zipFileName, path.extname(zipFileName));
      typeDirName = path.basename(path.dirname(zipFileName));
      doc.documentElement.appendChild(E("types", [T("members", fullName), T("name", metadataObjectsByDir[typeDirName].xmlName)]));
    }
    doc.documentElement.appendChild(T("version", this.apiVersion));
    xml = new xmldom.XMLSerializer().serializeToString(doc);
    zip.file("unpackaged/package.xml", xml);
    this.conn.metadata.pollTimeout = 100000;
    z = zip.generate({
      type: "nodebuffer"
    });
    console.log(z);
    p = this.conn.metadata.deploy(z, this.deployOptions);
    return p.check((function(_this) {
      return function(er, asyncResult) {
        if (asyncResult != null) {
          return _this.checkStatus(asyncResult.id, cb);
        } else {
          return console.log(er);
        }
      };
    })(this));
  };

  return SFDeploy;

})();

module.exports = SFDeploy;
